# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'UI/InfoScreen.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import pyqtSignal, QObject
from DatetimeLabel import *
from TSO_State import TSO_State
import requests


SLEEP_DELAY = 3


class Logic(QObject):
    new_screen = pyqtSignal(object)

    def __init__(self, inscription):
        super(Logic, self).__init__()
        self.inscription = inscription
        self.data = None
        self.actual = True

    def run(self):
        if self.inscription == "Загрузка":
            try:
                r = requests.get('http://127.0.0.1:8000/api/v1/TSO/pumps/')
            except requests.exceptions.ConnectionError:
                print('ERROR')
                return
            # print(r)
            if r.status_code == 200:
                self.data = r.json()
            QtCore.QThread.msleep(SLEEP_DELAY * 1000)
        elif self.inscription == "Следуйте инструкциям на пин-паде":
            pass
        elif self.inscription == "Подождите, идёт печать":
            pass

        if self.actual:
            self.new_screen.emit(self.data)


class InfoScreen(QtWidgets.QMainWindow):
    def __init__(self, state, inscription_num):
        from MainScreen import MainScreen
        from ErrorScreen import ErrorScreen
        from PumpsScreen import PumpsScreen
        super(InfoScreen, self).__init__()
        self.setupUi()
        self.state = state
        self.choice_of_inscription(inscription_num)
        self.data = None

        self._dictButtons = {
            'mainScreen': ('mainScreen', MainScreen),
            'errorScreen': ('errorScreen', ErrorScreen),
            'pumpsScreen': ('pumpsScreen', PumpsScreen)
        }

        self.delay_timer = QtCore.QTimer()
        self.delay_timer.timeout.connect(self.showScreen)
        self.timer = QtCore.QTimer()
        self.timer.timeout.connect(self.update_timedelay)
        self.decrease = 0
        set_current_time(self.label_6, self.decrease)
        self.delay_timer.start(TIMER_DELAY * 1000)
        self.timer.start(1 * 1000)

        self.thread = QtCore.QThread()
        self.logic = Logic(self.get_inscription())
        self.logic.moveToThread(self.thread)
        self.logic.new_screen.connect(self.showScreen)
        self.thread.started.connect(self.logic.run)
        self.thread.start()
        # self.process = QtCore.QTimer()
        # self.process.timeout.connect(self.start_process)
        # self.process.start(1)
        # self.c = Communicate()
        # self.c.new_screen.connect(self.showScreen)
        # self.start_process()

    def update_timedelay(self):
        # print('here')
        self.decrease += 1
        set_current_time(self.label_6, self.decrease)

    def setupUi(self):
        self.setObjectName("MainWindow")
        self.resize(873, 662)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_2.addWidget(self.label_5)
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_2.addWidget(self.label_6)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem1)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout_5.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.horizontalLayout_5.addWidget(self.label)
        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout_3.addItem(spacerItem2)
        self.horizontalLayout.addLayout(self.verticalLayout_3)
        self.setCentralWidget(self.centralwidget)

        self.retranslateUi()
        QtCore.QMetaObject.connectSlotsByName(self)

    def choice_of_inscription(self, inscription_num):
        inscription_list = ["Загрузка",
                           "Следуйте инструкциям на пин-паде",
                           "Подождите, идёт печать",
                           "Возьмите напечатанную квитанцию заказа",
                           "Возьмите напечатанный чек"]

        inscription = inscription_list[inscription_num]
        self.label.setText(inscription)
        #print(inscription)

    def get_inscription(self):
        return self.label.text()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("InfoScreen", "InfoScreen"))
        self.label_5.setText(_translate("MainWindow", "Возврат в главное меню через:"))
        self.label_6.setText(_translate("MainWindow", "TextLabel"))
        self.label_2.setText(_translate("MainWindow", "TextLabel"))
        self.label.setText(_translate("MainWindow", "TextLabel"))

    def showScreen(self, data=None):
        self.delay_timer.stop()
        self.timer.stop()
        #self.process.stop()
        print(data)
        if data:
            self.data = data
        sender = self.sender()
        if sender == self.delay_timer:
            screen_name, screen_class = self._dictButtons['mainScreen']
            self.logic.actual = False
        elif self.data is None:
            screen_name, screen_class = self._dictButtons['errorScreen']
        elif self.data:
            screen_name, screen_class = self._dictButtons['pumpsScreen']
        setattr(self, screen_name, screen_class(self.state, self.data))
        _screen = getattr(self, screen_name, None)
        _screen.show()
        self.close()
        #print('close')


if __name__ == '__main__':
    import sys
    app = QtWidgets.QApplication(sys.argv)
    state = TSO_State(currencydetector=False)
    ui = InfoScreen(state, 0)
    ui.show()
    sys.exit(app.exec_())
